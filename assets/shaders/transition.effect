// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        progress: { value: 0.0 }
        rf: { value: 0.0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif
  
  uniform DATA {
    float progress;
    float rf;
  };

  // borrowed from https://iquilezles.org/
  float sdStar5(in vec2 p, in float r, in float rf)
  {
      const vec2 k1 = vec2(0.809016994375, -0.587785252292);
      const vec2 k2 = vec2(-k1.x,k1.y);
      p.x = abs(p.x);
      p -= 2.0*max(dot(k1,p),0.0)*k1;
      p -= 2.0*max(dot(k2,p),0.0)*k2;
      p.x = abs(p.x);
      p.y -= r;
      vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);
      float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );
      return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      vec2 uv = uv0 - 0.5;
      uv.x = uv.x * 1280.0 / 720.0;
      if (sdStar5(uv, progress, rf) > 0.0)
        o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv);
      else
        o.a = 0.0;
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
